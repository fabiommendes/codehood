{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Exam",
  "description": "A MDQ Exam represents a document with a sequence of questions.",
  "required": [ "id", "questions" ],
  "properties": {
    "id": {
      "description": "A (ideally) unique identifier for the question set",
      "type": "string",
      "minLength": 1
    },
    "title": {
      "description": "A name for the collection of questions",
      "default": "",
      "type": "string"
    },
    "description": {
      "description": "Some additional description for the exam",
      "default": "",
      "type": "string"
    },
    "preamble": {
      "description": "An introductory text displayed to students",
      "default": "",
      "type": "string"
    },
    "questions": {
      "description": "List of questions",
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/question"
      }
    },
    "tags": {
      "description": "Some arbitrary tags that can be attached to the exam.",
      "default": [],
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "string"
      }
    }
  },
  "additionalProperties": false,
  "$defs": {
    "associative": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Associative question",
      "description": "Associative questions display a list of items and the user must associate each item with their corresponding answer.",
      "allOf": [
        {
          "$ref": "#/$defs/base-selection-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "associative"
            },
            "keys": {
              "description": "A list of objects representing the left hand side of the association.",
              "type": "array",
              "minLength": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/associative/$defs/associative-item-key-text"
                  },
                  {
                    "$ref": "#/$defs/associative/$defs/associative-item-key-image"
                  }
                ]
              }
            },
            "shuffle": {
              "description": "Whether it is possible to shuffle the order of the items in the association.",
              "default": "both",
              "type": "string",
              "enum": [ "both", "keys", "values", "none" ]
            },
            "values": {
              "description": "An object with items corresponding to the right hand side of each association. The  keys represent unique identifiers.",
              "type": "object",
              "minLength": 2,
              "additionalProperties": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/associative/$defs/associative-item-text"
                  },
                  {
                    "$ref": "#/$defs/associative/$defs/associative-item-image"
                  }
                ]
              }
            }
          }
        }
      ],
      "additionalProperties": false,
      "$defs": {
        "associative-item-image": {
          "type": "object",
          "required": [ "url", "alt" ],
          "properties": {
            "alt": {
              "description": "The \"alt\" tag for the image. It is used to display a text when the image cannot be loaded and for assistive technology. The alt text is never formatted as Markdown.",
              "type": "string"
            },
            "url": {
              "description": "An url relative to the question file.",
              "type": "string"
            }
          }
        },
        "associative-item-key": {
          "description": "Properties for association keys.",
          "type": "object",
          "required": [ "answer-key" ],
          "properties": {
            "answer-key": {
              "description": "A list of ids representing correct associations.",
              "type": "array",
              "items": {
                "type": "string",
                "minItems": 1,
                "uniqueItems": true
              }
            },
            "feedback": {
              "description": "The feedback text shown to students that selected each specific associations.",
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "associative-item-key-image": {
          "allOf": [
            {
              "$ref": "#/$defs/associative/$defs/associative-item-key"
            },
            {
              "$ref": "#/$defs/associative/$defs/associative-item-key-image"
            }
          ]
        },
        "associative-item-key-text": {
          "allOf": [
            {
              "$ref": "#/$defs/associative/$defs/associative-item-key"
            },
            {
              "$ref": "#/$defs/associative/$defs/associative-item-key-text"
            }
          ]
        },
        "associative-item-text": {
          "type": "object",
          "required": [ "text" ],
          "properties": {
            "style": {
              "description": "Apply styles on how the text should be displayed. Can be one of \"simple\", \"headline\" or a programming language.",
              "default": "simple",
              "type": "string"
            },
            "text": {
              "description": "The text to be displayed.",
              "type": "string"
            }
          }
        }
      }
    },
    "base-programming-question": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Base programming question",
      "description": "Common fields for programming questions.",
      "allOf": [
        {
          "$ref": "#/$defs/base-question"
        },
        {
          "type": "object",
          "required": [ "supported-languages" ],
          "properties": {
            "answer-key": {
              "description": "Reference implementation used to grade the question. It is a code snippet that might be  executed to compute the expected output from some given inputs. It is a dictionary mapping programming languages with their corresponding code snippet.",
              "$ref": "#/$defs/base-programming-question/$defs/dict-str-str"
            },
            "compilation": {
              "description": "A dictionary mapping programming languages with their corresponding compilation environments. The options vary on a per-language basis and are encoded as somewhat arbitrary JSON objects.\n",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Encodes the type of environment selected for the language.",
                  "type": "string",
                  "minLength": 1
                },
                "artifact": {
                  "description": "Name of the produced artifact.",
                  "type": "string",
                  "minLength": 1
                },
                "artifact-type": {
                  "description": "The type of artifact produced by the compilation. It is used to determine how to execute the code.\n",
                  "default": "executable",
                  "enum": [ "lib", "executable" ]
                }
              },
              "additionalProperties": true
            },
            "environment": {
              "description": "A dictionary mapping programming languages with their corresponding execution environment. The options vary on a per-language basis and are encoded as arbitrary JSON objects with a required \"type\" key. Each language is associated with a single environment. It is up to the execution environment interpret how the environment options affect how code is  executed.\n",
              "type": "object",
              "properties": {
                "type": {
                  "description": "Encodes the type of environment selected for the language.",
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": true
            },
            "forbidden-functions": {
              "description": "A list of fully qualified functions that cannot be used by the student.\n",
              "$ref": "#/$defs/base-programming-question/$defs/dict-str-array-str"
            },
            "forbidden-modules": {
              "description": "A list of fully qualified functions modules that cannot be used by the student.\n",
              "$ref": "#/$defs/base-programming-question/$defs/dict-str-array-str"
            },
            "forbidden-syntax": {
              "description": "A mapping of languages to a map of keywords (if, for, etc) with the maximum number of  times they can occur in the code.\n",
              "examples": [
                {
                  "": {
                    "if": 2,
                    "for": 1,
                    "while": 0
                  },
                  "cpp": {
                    "if": 3,
                    "for": 2
                  }
                }
              ],
              "default": {},
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "number",
                  "minValue": 0
                }
              }
            },
            "forbidden-types": {
              "description": "A list of fully qualified types or classes that cannot be used by the student.\n",
              "$ref": "#/$defs/base-programming-question/$defs/dict-str-array-str"
            },
            "linting": {
              "description": "A dictionary mapping programming languages with their corresponding linting options. Linting is executed on successful submissions and can discount points for style and poor practices.\n",
              "type": "object",
              "properties": {
                "type": {
                  "description": "The selected linter mechanism and their options.",
                  "type": "string",
                  "minLength": 1
                }
              },
              "additionalProperties": true
            },
            "placeholder": {
              "description": "A placeholder for the code snippet. It is used to display an initial structure to students. The special wildcard key \"\" defines the placeholder to all all other languages.",
              "examples": [
                {
                  "python": "def main():\n    x = ... # your code here\n    print(\"x =\", x)\n"
                }
              ],
              "$ref": "#/$defs/base-programming-question/$defs/dict-str-str"
            },
            "supported-languages": {
              "description": "A list of programming languages that can be used in the question. The list of supported languages depends on the platform. It should be a some slug-like identifier such as  python, cpp, etc.\nEmpty arrays (default) implies that only the languages with a declared placeholder or answer  key code are supported. The special array [\"\"] implies that all supported languages are allowed.",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "timeout": {
              "description": "The maximum time in seconds that the answer key can run. If the answer key runs for more than this time, it is considered to be stuck and the execution is aborted.\n",
              "oneOf": [
                {
                  "const": null
                },
                {
                  "type": "number"
                },
                {
                  "type": "string",
                  "pattern": "[0-9]+(.[0-9]+)?%"
                }
              ]
            }
          }
        }
      ],
      "required": [ "supported-languages" ],
      "$defs": {
        "dict-str-array-str": {
          "default": {},
          "type": "object",
          "additionalProperties": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "dict-str-str": {
          "default": {},
          "type": "object",
          "additionalProperties": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "base-question": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Base question",
      "description": "Common fields for all question types. This is a base schema and should not be instantiated directly since it does not correspond to any concrete question type.",
      "type": "object",
      "required": [ "id", "type", "stem" ],
      "properties": {
        "id": {
          "description": "A unique identifier for the question in the set.",
          "type": "string",
          "minLength": 1
        },
        "title": {
          "description": "The question title. It is used to display a friendly name in the user interface. It is  different from the ID in that it is a human-readable name which is intended for displaying to the user.",
          "type": "string",
          "minLength": 1
        },
        "type": {
          "description": "Discriminator for the question type.",
          "type": "string"
        },
        "format": {
          "$ref": "#/$defs/base-question/$defs/text-format"
        },
        "comment": {
          "description": "An optional text that is shown only to the teacher.",
          "default": "",
          "type": "string"
        },
        "epilogue": {
          "description": "An optional text that is shown after the question.",
          "default": "",
          "type": "string"
        },
        "footnotes": {
          "description": "A list of footnotes declared in the preamble, epilogue or in the main text of the question.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/$defs/base-question/$defs/footnote"
          }
        },
        "grade-range": {
          "$ref": "#/$defs/base-question/grade-range"
        },
        "media": {
          "description": "A list of media objects like images and videos that can be referenced in the question.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/$defs/base-question/$defs/media-object"
          }
        },
        "preamble": {
          "description": "An optional text introducing the subject matter of the question.",
          "default": "",
          "type": "string"
        },
        "stem": {
          "description": "The main command for the question. It should be short and objective and  fits in a single paragraph. It can be written as a question or an incomplete sentence. Longer paragraphs of introductory text can be added in the preamble.",
          "examples": [
            "Select the correct answer.",
            "How much is 2 + 2?",
            "The capital of France is..."
          ],
          "type": "string",
          "minLength": 1
        },
        "tags": {
          "description": "Some arbitrary tags that can be attached to the question.",
          "default": [],
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "weight": {
          "description": "The weight of the question in points. It is used to compute the final grade. The default  value is 100. The weight is multiplied by the grade of the question to compute the final  grade.",
          "default": 100,
          "type": "number"
        }
      },
      "$defs": {
        "footnote": {
          "title": "Footnote",
          "description": "A footnote is a reference to a note at the bottom of the page. It is used to provide  additional information about a word or phrase in the text. They can be referenced in the preamble, epilogue or in the main text of the question.",
          "type": "object",
          "required": [ "id", "text" ],
          "properties": {
            "id": {
              "description": "An identifier for the footnote.",
              "type": "string",
              "minLength": 1
            },
            "text": {
              "description": "The text associated with the footnote.",
              "type": "string",
              "minLength": 1
            }
          }
        },
        "media-object": {
          "title": "Media object",
          "description": "A media object like an image or a video that can be referenced in the question.",
          "type": "object",
          "required": [ "id", "type", "url" ],
          "properties": {
            "id": {
              "description": "An identifier for the media object.",
              "type": "string",
              "minLength": 1
            },
            "type": {
              "$ref": "#/$defs/base-question/$defs/media-type"
            },
            "caption": {
              "description": "An optional caption for the media object.",
              "default": "",
              "type": "string"
            },
            "url": {
              "description": "The URL for the media asset.",
              "type": "string",
              "minLength": 1
            }
          }
        },
        "media-type": {
          "title": "Media type",
          "description": "The type of media asset.",
          "type": "string",
          "enum": [ "image", "video", "audio" ]
        },
        "text-format": {
          "title": "Text format",
          "description": "How to interpret textual strings.",
          "default": "md",
          "enum": [ "md", "text" ]
        }
      },
      "grade-range": {
        "title": "Grade range",
        "description": "Describes how the question should be graded. Usually grades are represented as a percentage between 0 and 100. In order to award different points to different questions, use the weight field instead of tweaking this field.",
        "type": "object",
        "required": [ "min", "max" ],
        "properties": {
          "max": {
            "description": "The maximum value for the grade. If the computed grade is above this value, the final  value is truncated. Null represents an unbounded value.",
            "default": 100,
            "anyOf": [
              {
                "type": "number"
              },
              {
                "const": null
              }
            ]
          },
          "min": {
            "description": "The minimum value for the grade. If the computed grade is bellow this value, the  final value is truncated. Null represents an unbounded value.",
            "default": 0,
            "anyOf": [
              {
                "type": "number"
              },
              {
                "const": null
              }
            ]
          }
        },
        "selection-question-mixin": {
          "title": "Base selection question",
          "description": "Common fields for questions based on selections like multiple-choice, multiple-selection,  true-false, etc.",
          "type": "object",
          "required": [ "choices" ],
          "properties": {
            "shuffle": {
              "description": "Whether it is possible to shuffle the order of the choices.",
              "default": true,
              "type": "boolean"
            }
          }
        }
      }
    },
    "base-selection-item": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Base selection item",
      "description": "Common fields for question items based in selection questions like multiple-choice,  multiple-selection, true-false, etc.",
      "type": "object",
      "required": [ "text" ],
      "properties": {
        "feedback": {
          "description": "The feedback text shown to students that selected that choice.",
          "default": "",
          "type": "string"
        },
        "fixed": {
          "description": "Whether the choice is fixed in place and cannot be shuffled. This is useful for specifying options like \"all of the above\", \"none of the above\", etc. The  non-fixed choices may be shuffled.",
          "default": false,
          "type": "boolean"
        },
        "text": {
          "description": "The textual content for the choice",
          "type": "string",
          "minLength": 1
        }
      }
    },
    "base-selection-question": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Base selection question",
      "description": "Common fields for questions based on selections like multiple-choice, multiple-selection,  true-false, etc.",
      "allOf": [
        {
          "$ref": "#/$defs/base-question"
        },
        {
          "type": "object",
          "required": [ "choices" ],
          "properties": {
            "shuffle": {
              "description": "Whether it is possible to shuffle the order of the choices.",
              "default": true,
              "type": "boolean"
            }
          }
        }
      ]
    },
    "code-io": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Coding IO question",
      "description": "A programming question that evaluates the result using by passing specific text inputs and  comparing it with the expected outputs displayed on the terminal.",
      "allOf": [
        {
          "$ref": "#/$defs/base-programming-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "code-io"
            },
            "answer-key": {
              "description": "An array of mechanisms to produce input and output examples.\n",
              "type": "array",
              "minItems": 1,
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/$defs/code-io/$defs/io-answer-key"
                  },
                  {
                    "$ref": "#/$defs/code-io/$defs/iospec-answer-key"
                  }
                ]
              }
            },
            "conf": {
              "$ref": "#/$defs/code-io/$defs/code-io-conf"
            }
          }
        }
      ],
      "additionalProperties": false,
      "$defs": {
        "code-io-conf": {
          "description": "A dictionary with configuration options for how the student submissions will be matched with the answer key.",
          "type": "object",
          "properties": {
            "case-sensitive": {
              "description": "If true (default), ignore case when matching strings.",
              "default": true,
              "type": "boolean"
            },
            "ignore-accents": {
              "description": "If true, normalize unicode strings to remove accents and diacritics.",
              "default": false,
              "type": "boolean"
            },
            "match-spaces": {
              "description": "Whether to normalize when comparing the output with the expected output. If true, it ignores trailing whitespaces at each line and tries to find a tab size that would match sequences of spaces to sequences of tabs.",
              "default": false,
              "type": "boolean"
            }
          }
        },
        "io-answer-key": {
          "type": "object",
          "required": [ "input" ],
          "properties": {
            "input": {
              "description": "The input string be passed to the program.",
              "type": "string"
            },
            "output": {
              "description": "The expected output for this execution.",
              "type": "string"
            }
          }
        },
        "iospec-answer-key": {
          "type": "object",
          "required": [ "iospec" ],
          "properties": {
            "iospec": {
              "description": "An iospec source code describing the program interaction.",
              "type": "string"
            }
          }
        }
      }
    },
    "essay": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Open ended essay",
      "description": "Essay questions display a text box where the user can write a long answer. The answer is graded manually.",
      "allOf": [
        {
          "$ref": "#/$defs/base-selection-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "essay"
            },
            "input": {
              "description": "The type of input field to be used for the essay. It can be \"text\", \"richtext\", \"code\" or any specific programming language. The default is \"richtext\".\n",
              "examples": [ "text", "richtext", "python" ],
              "default": "richtext",
              "type": "string"
            }
          }
        }
      ],
      "additionalProperties": false
    },
    "fill-in": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Fill-in-the-blank question",
      "description": "Fill-in-the-blank questions display a paragraph of text intercalated with input fields to representing blanks the user must fill in. The blanks can be of several different types.",
      "allOf": [
        {
          "$ref": "#/$defs/base-question"
        },
        {
          "type": "object",
          "required": [ "body" ],
          "properties": {
            "body": {
              "description": "The body of the question is formed by text snippets intercalated with input fields that represent blanks the user must fill in. The blanks can be of several different types.",
              "type": "array",
              "minItems": 1,
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/$defs/fill-in/$defs/fill-in-input-selection"
                  },
                  {
                    "$ref": "#/$defs/fill-in/$defs/fill-in-input-numeric"
                  },
                  {
                    "$ref": "#/$defs/fill-in/$defs/fill-in-input-text"
                  }
                ]
              }
            }
          }
        }
      ],
      "additionalProperties": false,
      "$defs": {
        "fill-in-input-numeric": {
          "description": "Used for numeric inputs. The answer is a number and the grading is done by comparing the answer with the correct answer within a tolerance.",
          "type": "object",
          "required": [ "answer-key" ],
          "properties": {
            "type": {
              "const": "numeric"
            },
            "answer-key": {
              "description": "The correct answer. This is a number and the grading is done by comparing the answer with the correct answer within a tolerance.",
              "type": "number"
            },
            "relative-tol": {
              "description": "The relative tolerance for the answer. The answer is correct if it is within this relative tolerance of the correct answer.",
              "default": 0
            },
            "tol": {
              "description": "The tolerance for the answer. The answer is correct if it is within this tolerance of the correct answer.",
              "default": 0
            },
            "unit": {
              "description": "The unit for the answer. It is usually displayed in the input box after the number.\n",
              "examples": [ "m", "kg", "s", "meters" ],
              "default": "",
              "type": "string"
            }
          }
        },
        "fill-in-input-selection": {
          "description": "It is used to display a selection box with a list of choices.",
          "type": "object",
          "properties": {
            "type": {
              "const": "selection",
              "placeholder": {
                "description": "The placeholder text displayed for unselected choices.",
                "default": "",
                "type": "string"
              },
              "shuffle": {
                "description": "Whether it is possible to shuffle the order of choices in selection boxes.",
                "default": true,
                "type": "boolean"
              }
            }
          }
        },
        "fill-in-input-text": {
          "description": "Used for text based inputs. The answer is a short string of text and the grading is done by comparing it with the reference answer key. For longer answers, please use the \"essay\"  question type.",
          "type": "object",
          "required": [ "answer-key" ],
          "properties": {
            "type": {
              "const": "text"
            },
            "answer-key": {
              "description": "The answer key. It can be specified in different ways: - A single string, which is the correct answer. - An array of strings, which are all correct answers. - A regular expression, which is used to match the answer. - A null value, which denotes that the question must be graded manually.",
              "type": "string"
            },
            "case-sensitive": {
              "description": "Whether to consider case when comparing the answer with the reference value.\n",
              "default": false,
              "type": "boolean"
            }
          }
        }
      }
    },
    "multiple-choice": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Multiple choice question",
      "description": "Multiple choice questions accept a single correct answer, which yields full grade.",
      "allOf": [
        {
          "$ref": "#/$defs/base-selection-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "multiple-choice"
            },
            "choices": {
              "description": "The list of choices for the question",
              "type": "array",
              "minItems": 2,
              "items": {
                "$ref": "#/$defs/multiple-choice/$defs/multiple-choice-item"
              }
            },
            "grading-strategy": {
              "$ref": "#/$defs/multiple-choice/$defs/multiple-choice-grading-strategy"
            },
            "penalty": {
              "description": "A penalty given when grading wrong answers. Penalty is a positive value that corresponds to the negative grade assigned to the wrong answers.",
              "default": 0,
              "type": "number",
              "minValue": 0
            }
          }
        }
      ],
      "additionalProperties": false,
      "$defs": {
        "multiple-choice-grading-strategy": {
          "title": "Multiple choice grading strategy",
          "description": "Describes how grades are computed from answers. Some strategies allow for multiple selections.\n* simple: \n    Student select a single choice, grade is assigned base on the \"value\" of the selected choice.\n* required:\n    Like before, but the student must select a choice. If no choice is selected, the question \n    receives an explicit penalty.\n* average:\n    Student can select multiple choices. The grade is the average of the selected choices.",
          "enum": [ "simple", "required", "average" ]
        },
        "multiple-choice-item": {
          "title": "Multiple choice item",
          "description": "A choice for the multiple choices question. It is a text with an optional feedback.",
          "allOf": [
            {
              "$ref": "#/$defs/base-selection-item"
            },
            {
              "type": "object",
              "properties": {
                "grade": {
                  "description": "Typically a numeric value between 0 and 100, interpreted as a percentage. If  not specified, uses the penalty field as the default grading value.\n",
                  "type": "number"
                }
              }
            }
          ]
        }
      }
    },
    "multiple-selection": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "A multiple selection question",
      "description": "Multiple selection questions display a list of choices and a full grade is  given if the user computes all correct answers and none of the incorrect ones.",
      "allOf": [
        {
          "$ref": "#/$defs/base-selection-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "multiple-selection"
            },
            "choices": {
              "description": "The list of choices for the question",
              "type": "array",
              "minItems": 2,
              "items": {
                "allOf": [
                  {
                    "$ref": "#/$defs/base-selection-item"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "correct": {
                        "description": "Specify if the choice is correct or not.",
                        "default": false,
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            },
            "grading": {
              "description": "How should the question be graded?",
              "type": "object",
              "properties": {
                "strategy": {
                  "description": "The strategy used for grading.  - strict: The user must select all correct answers and none of the incorrect ones. \n  the grade is all or nothing.\n- lenient: Each selected correct answer gives a point and each selected incorrect \n  answer subtracts a point. The grade is the number of points divided by the number \n  of correct answers.\n- true-false: Each choice is treated as a true-false question.\n",
                  "default": "strict",
                  "type": "string"
                }
              }
            }
          }
        }
      ],
      "additionalProperties": false
    },
    "private-keys": {
      "description": "A list of private keys that are stripped from the document before showing it to students.  This defines a different schema since some of those keys are required.",
      "enum": [
        "correct",
        "grade",
        "answer-key",
        "comment",
        "feedback",
        "shuffle",
        "fixed",
        "examples",
        "conf"
      ]
    },
    "question": {
      "description": "A question in a question set or exam.",
      "oneOf": [
        {
          "$ref": "#/$defs/essay"
        },
        {
          "$ref": "#/$defs/associative"
        },
        {
          "$ref": "#/$defs/fill-in"
        },
        {
          "$ref": "#/$defs/multiple-choice"
        },
        {
          "$ref": "#/$defs/multiple-selection"
        },
        {
          "$ref": "#/$defs/true-false"
        },
        {
          "$ref": "#/$defs/code-io"
        },
        {
          "$ref": "#/$defs/unit-test"
        }
      ]
    },
    "true-false": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "True False question",
      "description": "True-false questions display a list of choices in which the student should judge individually whether each one is true or false.\n",
      "allOf": [
        {
          "$ref": "#/$defs/base-selection-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "true-false"
            },
            "choices": {
              "description": "The list of choices for the question",
              "type": "array",
              "minItems": 1,
              "items": {
                "$ref": "#/$defs/true-false/$defs/true-false-item"
              }
            },
            "grading": {
              "description": "How the question should be graded?",
              "type": "object",
              "properties": {
                "strategy": {
                  "$ref": "#/$defs/true-false/$defs/true-false-grading"
                }
              }
            }
          }
        }
      ],
      "additionalProperties": false,
      "$defs": {
        "true-false-grading": {
          "title": "True False grading strategy",
          "description": "A grading strategy for true-false questions. Points are awarded in the 0-100 range.\n",
          "type": "object",
          "properties": {
            "correct": {
              "description": "The number of points as a percentage awarded for a correct answer.\n",
              "default": 100,
              "type": "number",
              "minValue": 0
            },
            "incorrect": {
              "description": "The number of points as a percentage subtracted for an incorrect answer.\n",
              "default": 0,
              "type": "number",
              "minValue": 0
            }
          }
        },
        "true-false-item": {
          "title": "True False item",
          "description": "A choice for the true-false question. It is a text with an optional feedback.\n",
          "allOf": [
            {
              "$ref": "#/$defs/base-selection-item"
            },
            {
              "type": "object",
              "properties": {
                "correct": {
                  "description": "Specify if the choice is correct or not.",
                  "type": "boolean"
                }
              }
            }
          ]
        }
      }
    },
    "unit-test": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Unit test question",
      "description": "A programming question that is evaluated running some unit tests.",
      "allOf": [
        {
          "$ref": "#/$defs/base-programming-question"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "code-io"
            }
          },
          "answer-key": {
            "description": "An array of mechanisms to produce input and output examples.",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "string"
            }
          }
        }
      ],
      "additionalProperties": false
    }
  }
}
